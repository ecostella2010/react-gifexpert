{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GitExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","protoType","PropType","func","isRequired","getGifs","category","a","url","encodeURI","fetch","resp","json","data","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GitExpertApp","key","ReactDOM","render","document","getElementById"],"mappings":"+LAGaA,EAAc,SAAC,GAA0B,IAAvBC,EAAsB,EAAtBA,cAE3B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAU,OAAOP,GAAP,mBAAsBO,OAC9CN,EAAe,MAKnB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAjBc,SAACP,GACvBF,EAAeE,EAAEQ,OAAOF,aAsBhCZ,EAAYe,UAAY,CACpBd,cAAee,IAASC,KAAKC,Y,oCC5BpBC,EAAO,uCAAG,WAAMC,GAAN,qBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAUH,GAF9C,+DAIAI,MAAQF,GAJR,cAIbG,EAJa,gBAOIA,EAAKC,OAPT,uBAOXC,EAPW,EAOXA,KAPW,kBAUZA,EAAKC,KAAM,SAAAC,GAAQ,IAAD,EACrB,MAAO,CACHC,GAAKD,EAAIC,GACTC,MAAQF,EAAIE,MACZT,IAAG,UAAGO,EAAIG,cAAP,aAAG,EAAYC,iBAAiBX,SAdxB,2CAAH,sDCDPY,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOT,EAAU,EAAVA,IAIrC,OACI,sBAAKa,UAAY,yDAAjB,UACI,qBAAKC,IAAMd,EAAMe,IAAQN,IACzB,kCAAMA,EAAN,WCLCO,EAAU,SAAC,GAAoB,IAAjBlB,EAAgB,EAAhBA,SACvB,ECDwB,SAAEA,GAC1B,MAA0BlB,mBAAS,CAC/ByB,KAAM,GACNY,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KA2BA,OAtBAC,qBAAY,WAORvB,EAAUC,GACTuB,MAAM,SAAAC,GAAUH,EAAY,CACGd,KAAMiB,EACNL,SAAS,SAG1C,CAAEnB,IASEoB,ED3B0BK,CAAczB,GAAlCY,EAAb,EAAQL,KAAaY,EAArB,EAAqBA,QACrB,OACI,qCACI,qBAAIJ,UAAU,oDAAd,uBAA8Ef,EAA9E,OACEmB,GAAW,mBAAGJ,UAAU,mDAAb,0BACb,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAM,SAAAC,GAAG,OACR,cAAC,EAAD,eAEQA,GADIA,EAAIC,aET/BgB,G,KAAe,WAGxB,MAAoC5C,mBAAS,CAAC,cAA9C,mBAAOQ,EAAP,KAAmBT,EAAnB,KAYA,OACI,qCACG,gDACA,cAAC,EAAD,CAAaA,cAAkBA,IAC/B,uBAEC,6BAUQS,EAAWkB,KAAK,SAAER,EAAU2B,GAAZ,OAEZ,cAAC,EAAD,CAEI3B,SAAaA,GADL2B,aChCpCC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,U","file":"static/js/main.2fa9c3ac.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropType from 'prop-types';\n\nexport const AddCategory = ( { setCategories } )  => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue( e.target.value );\n    }\n\n    const handleSubmit = (e) =>{\n        e.preventDefault();\n        if (inputValue.trim().length > 2) {\n            setCategories(categories => [  inputValue, ...categories ]);\n            setInputValue( '' );\n        }\n    }\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <input \n                type=\"text\"\n                value={inputValue}\n                onChange={ handleInputChange }\n            ></input>\n        </form>\n    )\n}\n\nAddCategory.protoType = {\n    setCategories: PropType.func.isRequired \n}\n","\n\n\nexport const getGifs = async(category) => {\n    //console.log('category:', category);\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=HQYcz1cE4MrSnWH5veByJYYTwqBXu7zz`;\n    //console.log (url);\n    const resp = await fetch ( url );\n    //const data = await resp.json();\n    //Uso RestructuraciÃ³n \n    const { data } = await resp.json();\n    //console.log( data );\n    \n    return data.map ( img => {\n        return {\n            id : img.id,\n            title : img.title,\n            url : img.images?.downsized_medium.url\n        }\n    })\n\n    //return gifs;\n\n    //console.log( gifs );\n    //setImages(gifs);\n    //console.log( images );\n\n    \n    \n}\n\n","import React from 'react'\n\nexport const GifGridItem = ( {id, title, url} ) => {\n\n    //console.log ({id, title, url});\n\n    return (\n        <div className = \"card animate__animated animate__bounce animate__fadeIn\">\n            <img src={ url } alt = { title }></img>\n            <p> { title } </p>\n            {/* { title } */}\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ( { category } ) => {\n    const { data:images, loading } = useFetchGifs( category );\n    return (\n        <>\n            <h3 className=\"animate__animated animate__bounce animate__fadeIn\"> Filtro : { category } </h3>\n            { loading && <p className=\"animate__animated animate__bounce animate__flash\"> Loading... </p> }\n            <div className=\"card-grid\">\n                {\n                    images.map ( img  => (\n                            <GifGridItem\n                                key = { img.id } \n                                {...img}\n                            />\n                    ))\n                }\n            </div>\n        </>\n   )\n}","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\n\nexport const useFetchGifs = ( category ) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect ( () => {\n        //getGifs ()\n        //getGifs( category )\n        // .then(imgs => setImages( imgs ))\n        //.then( setImages )\n        //}, [ category ]);\n\n        getGifs ( category ) \n        .then( imgs => { setState   ({\n                                        data: imgs,\n                                        loading: false\n                                    });\n                        });    \n    }, [ category ]);\n\n    // setTimeout(() => {\n    //     setState({\n    //         data: [1,2,3,4],\n    //         loading: false\n    //     });\n    // }, 3000);\n\n    return state;  // { data:[], loading: true };\n}","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\nimport './index.css';\n\nexport const GitExpertApp = () => {\n    //const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\n    //const [categories, setCategories] = useState(['One Punch', 'Samurai X', 'Dragon Ball'])\n    const [categories, setCategories] = useState(['One Punch']);\n    // const handleAdd = () =>{\n    //     //Para agregar al final\n    //     //setCategories( [ ...categories, 'HunterXHunter' ] ); \n    //     //Para agregar al principio\n    //     //setCategories( [ 'HunterXHunter', ...categories  ] ); \n    //     //Otra forma es:\n    //     setCategories( cats => [ ...cats, 'HunterXHunter'  ] );\n    // }\n\n    //console.log ('categories');\n    //console.log (categories);\n    return (\n        <>\n           <h2> GitExpertApp </h2>\n           <AddCategory setCategories = { setCategories }/>\n           <hr />\n\n            <ol>\n                {   \n                    // categories.map( (category, i) => {\n                    //     return <li key = {category } > { category }  </li>\n                    // })\n                    \n                    // categories.map( (category, i) => (\n                    //     <li key = {category } > { category }  </li>)\n                    // )\n\n                    categories.map( ( category, key ) => (\n                        \n                        <GifGrid\n                            key = { key } \n                            category = { category }\n                        />\n                        \n                        )\n                    )\n                        \n\n                }\n            </ol>\n        </>  \n    )\n}\n\n//export default GitExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GitExpertApp } from './GitExpertApp';\nimport './index.css';\n\n//const divRoot = document.querySelector('#root');\n\nReactDOM.render(\n    <GitExpertApp  />,\n  document.getElementById('root')\n);\n\n//ReactDOM.render(< GitExpertApp /> , divRoot); "],"sourceRoot":""}