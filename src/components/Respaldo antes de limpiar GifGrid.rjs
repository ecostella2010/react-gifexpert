//import React, { useState, useEffect } from 'react'
import React from 'react'
import { useFetchGifs } from '../hooks/useFetchGifs'
// import { getGifs } from '../helpers/getGifs';
import { GifGridItem } from './GifGridItem';

export const GifGrid = ( { category } ) => {

    //const [count, setCount] = useState(0);
    //Casi como el component dispose para inicializar

    // const [images, setImages] = useState([]);

    // const state = useFetchGifs();
    // console.log( state );
    //Al desestructurar
    //const { data, loading } = useFetchGifs( category );

    //Si queremos desestructurar renombrando
    const { data:images, loading } = useFetchGifs( category );

    // console.log( loading );
    // console.log( data );

    //Se lleva a custome hook useFetchGifs
    // useEffect ( () => {
    //     //getGifs ()
    //     getGifs( category )
    //     // .then(imgs => setImages( imgs ))
    //     .then( setImages )
    // }, [ category ]);

    // const getGifs = async() => {
    //     //console.log('category:', category);
    //     const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=HQYcz1cE4MrSnWH5veByJYYTwqBXu7zz`;
    //     //console.log (url);
    //     const resp = await fetch ( url );
    //     //const data = await resp.json();
    //     //Uso RestructuraciÃ³n 
    //     const { data } = await resp.json();
    //     //console.log( data );
    //     const gifs = data.map ( img => {
    //         return {
    //             id : img.id,
    //             title : img.title,
    //             url : img.images?.downsized_medium.url
    //         }
    //     });

    //     //console.log( gifs );
    //     setImages(gifs);
    //     //console.log( images );
        
    // }

    return (
        <>
            <h3> Filtro : { category } </h3>

            {/* { loading ? 'Cargando...' : 'Data cargada' } */}

            {/* { loading ? <p> Loading... </p> : null } */}
            { loading && <p> Loading... </p> }

            <div className="card-grid">
                {
                    images.map ( img  => (
                            <GifGridItem
                                key = { img.id } 
                                // img = { img } 
                                //Para enviar todas las propiedades como propiedades independientes 
                                {...img}
                                
                            />
                    ))
                }

            </div>
        </>

        // <div>
        //     <h3> { category } </h3>
        //     <ol>
        //         {
        //             // images.map ( img => (
        //             //      <li key = { img.id } > { img.title }  </li>    
        //             // ) )

        //             //Desestructurando
        //             images.map ( ({ id, title }) => (
        //                 <li key = { id } > { title }  </li>    
        //            ) )

        //         }
        //     </ol>

        //     {/* <h3> { count } </h3>
        //     <button onClick= { () => setCount( count + 1) } > </button> */}
        // </div>
    )
}